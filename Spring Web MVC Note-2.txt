Spring Web MVC-2
==================
Objective:
1. use of @ModelAttribute
2. Use of Model View Controller concepts(MVC)
3. Use of Service Layer by @Service
4. Introduction of JSP EL (Expression lang) by ${}
5. Use of Dev Tools in SpringBoot



make a simple maven project : springwebmvc2

Update pom.xml file as:
========================

add parent for spring-boot-starter-parent as

<!-- Parent pom is mandatory to control versions of child dependencies -->
 <parent>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-parent</artifactId>
	<version>2.1.6.RELEASE</version>
	<relativePath/> 
</parent>

Add properties for Java-8 as:

<properties>
	<java.version>1.8</java.version>
</properties>

Add dependency as : spring-boot-starter-web   & tomcat-embed-jasper

<!-- Spring web brings all required dependencies to build web application. -->
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
</dependency> 
<dependency>
      <groupId>org.apache.tomcat.embed</groupId>
      <artifactId>tomcat-embed-jasper</artifactId>
      <scope>provided</scope>
</dependency>


===
create a file "application.properties" under folder : src/main/resources as :

spring.mvc.view.suffix=.jsp
spring.mvc.view.prefix=/WEB-INF/views/
server.port=8085

=== make 3 folders :  under src/main
a. src/main/webapp   b. src/main/webapp/WEB-INF  c. src/main/webapp/WEB-INF/views


Create a simple java class MainApp.java under package :  com.pack


package com.pack;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MainApp {

	public static void main(String[] args) {
		SpringApplication.run(MainApp.class, args);
	}

}

**@SpringBootApplication : it denotes as it is a springboot application , so when it's main method called, it can start the web container by executing method as :  SpringApplication.run(MainApp.class, args);

--- Now create a model class : User under packge : com.pack.beans

package com.pack.beans;

public class User {
private String uid;
private String pwd;
//add setter & getter
}

---------------
Now make a LoginController class  under com.pack.controller package
Now design a method there which returns a String values indicates a JSP file name(login.jsp).


package com.pack.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class LoginController {
	
    @RequestMapping(value = "/login" , method = RequestMethod.GET)
	public String getLoginPage( @ModelAttribute User user) {
		return "login";
	}
    
    @RequestMapping(value = "/login" , method = RequestMethod.POST)
    public String postLoginPage(@ModelAttribute User user) {
    	if(user.getUid().equals("sai") && user.getPwd().equals("ram")) {
    		return "success";
    	}
    	else {
    		return "login";
    	}
    	
    	
    }
}

*****create the jsp file : login.jsp  under location:   WEB-INF/views

<body bgcolor='yellow'>
<form action='login' method='post'>
<Table>
<tr><th>UserId: </th> <td><input type='text' name='uid'></td></tr>
<tr><th>Password: </th> <td><input type='password' name='pwd'></td></tr>
<tr><th colspan="2"><input type='submit' value='Login'></th></tr>
</Table>
</form>
</body>

======

And make a new jsp file : success.jsp

<h1>Welcome ${user.uid} to Spring Boot World.........</h1>


Now run application and test from web browser......


Now updation=================

===  this is not perfect accoding to enterprise level application
we need to check the login logic inside service -layer
so introduce service layer in project.

@Service
public class LoginService {
   
	public boolean checkLogin(User user) {
		if(user.getUid().equals("sai") && user.getPwd().equals("ram")) 
    		return true;
        else
    		return false;
	}
}

For this, update LoginController as :

@Controller
public class LoginController {
	@Autowired
	LoginService service;
	
    @RequestMapping(value = "/login" , method = RequestMethod.GET)
	public String getLoginPage( @ModelAttribute User user) {
    	return "login";
	}
    
    @RequestMapping(value = "/login" , method = RequestMethod.POST)
    public String postLoginPage(@ModelAttribute User user) {
    	if(service.checkLogin(user)) {
    		return"success";
    	}
    	else {
    		return "login";
    	}
    	
    	
    }
}


=== add this line on MainApp  ===  
@ComponentScan(basePackages = {"com.pack"})



==== Introduce concepts of Devtools
If we add this dependency , then no need to stop and start application if we make any change on code/project, it automatically detects and stop/start application from it's ends.
Update in pom.xml as follows:

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>



==========================================





























